name: Rust

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always
  POSTGRES_URL: postgres://postgres:postgres@localhost:5432
  MYSQL_URL: mysql://root@localhost:3306/public
  SQLITE_URL: sqlite://memory

jobs:
  check:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        runtime: [async-std, tokio, actix]
        tls: [native-tls, rustls]

    steps:
      - uses: actions/checkout@master
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          profile: minimal
          components: clippy, rustfmt
      - uses: Swatinem/rust-cache@v2
        with:
          key: .
          workspaces: .
      - name: clippy
        working-directory: .
        if: ${{ matrix.pwd == '.' }}
        run: |
          cargo clippy --all --all-targets --features sqlx-runtime-${{ matrix.runtime }}-${{ matrix.tls }},mssql,mysql,postgres,sqlite -- -Dwarnings
      - name: clippy_examples
        working-directory: .
        if: ${{ matrix.pwd == 'examples' }}
        run: |
          cargo clippy --all --all-targets --all-features -- -Dwarnings
      - name: rustfmt
        working-directory: .
        run: |
          cargo fmt --all -- --check

  check-examples:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          profile: minimal
          components: clippy, rustfmt
      - uses: Swatinem/rust-cache@v2
        with:
          key: examples
          workspaces: examples
      - name: clippy
        working-directory: examples
        run: |
          cargo clippy --all --all-targets --all-features -- -Dwarnings
      - name: rustfmt
        working-directory: examples
        run: |
          cargo fmt --all -- --check

  check-docs:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
      - uses: Swatinem/rust-cache@v2
      - name: cargo doc
        env:
          RUSTDOCFLAGS: "-D rustdoc::broken-intra-doc-links"
        run: cargo doc --features sqlx-runtime-tokio-rustls,mssql,mysql,postgres,sqlite --no-deps

  test:
    needs: [check, check-examples]

    runs-on: ubuntu-latest

    strategy:
      matrix:
        runtime: [async-std, tokio, actix]
        tls: [native-tls, rustls]

    steps:
      - uses: actions/checkout@master
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
      - name: Install Tarpaulin
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-tarpaulin
          version: 0.22.0
          use-tool-cache: true
      - uses: Swatinem/rust-cache@v2
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --features sqlx-runtime-${{ matrix.runtime }}-${{ matrix.tls }},mssql,mysql,postgres,sqlite --all-targets --manifest-path "axum-login/Cargo.toml"
      - name: Coverage
        working-directory: ./axum-login
        run: cargo tarpaulin --features sqlx-runtime-${{ matrix.runtime }}-${{ matrix.tls }},mssql,mysql,postgres,sqlite -o Lcov --output-dir ./coverage
      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          path-to-lcov: ./axum-login/coverage/lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}

  test-docs:
    needs: [check, check-examples]

    runs-on: ubuntu-latest

    strategy:
      matrix:
        runtime: [async-std, tokio, actix]
        tls: [native-tls, rustls]

    steps:
      - uses: actions/checkout@master
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
      - uses: Swatinem/rust-cache@v2
      - name: Run doc tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --features sqlx-runtime-${{ matrix.runtime }}-${{ matrix.tls }},mssql,mysql,postgres,sqlite --doc
  integration-tests:
    strategy:
      matrix:
        database_backend:
          - sqlite
          - mysql
          - postgres

    needs: [check, check-examples]

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master
      - name: Set database URL
        run: echo "DATABASE_URL=$(env | grep -i ${{ matrix.database_backend }}_url | cut -d "=" -f 2)" >> $GITHUB_ENV
      - name: Setup DBs
        run: docker-compose up -d
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
      - uses: Swatinem/rust-cache@v2
      - name: Run integration tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path "axum-login-tests/Cargo.toml" --features ${{ matrix.database_backend }}
